// src/pages/ResultPage/ResultPage.jsx
import React, { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import Button from "../../components/Button/Button";
import styles from "./ResultPage.module.css";

function ResultPage() {
  const location = useLocation();
  const navigate = useNavigate();
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å HomePage (‡∏•‡∏ö couponCode ‡∏≠‡∏≠‡∏Å)
  const { prediction, betType, status } = location.state || {};

  const [actualLottoResult, setActualLottoResult] = useState(null);
  const [isCheckingResult, setIsCheckingResult] = useState(true);

  const getBetTypeDisplayName = (type) => {
    switch (type) {
      case "3_top":
        return "3 ‡∏ï‡∏±‡∏ß‡∏ö‡∏ô";
      case "3_bottom":
        return "3 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á";
      case "2_top":
        return "2 ‡∏ï‡∏±‡∏ß‡∏ö‡∏ô";
      case "2_bottom":
        return "2 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á";
      default:
        return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    }
  };

  useEffect(() => {
    const fetchResult = async () => {
      setIsCheckingResult(true);
      await new Promise((resolve) => setTimeout(resolve, 2000));
      let simulatedResult;
      if (betType === "3_top" || betType === "3_bottom") {
        simulatedResult = "123";
      } else if (betType === "2_top" || betType === "2_bottom") {
        simulatedResult = "23";
      } else {
        simulatedResult = "XXX";
      }
      setActualLottoResult(simulatedResult);
      setIsCheckingResult(false);
    };

    if (status === "submitted") {
      fetchResult();
    } else if (!prediction) {
      navigate("/");
    }
  }, [status, prediction, navigate, betType]);

  if (!prediction) {
    return (
      <div className={styles.resultPage}>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å...</p>
      </div>
    );
  }

  let isWinner = false;
  if (actualLottoResult && prediction) {
    if (betType === "3_top" || betType === "3_bottom") {
      isWinner = prediction === actualLottoResult;
    } else if (betType === "2_top" || betType === "2_bottom") {
      isWinner = prediction === actualLottoResult.slice(-2);
    }
  }

  return (
    <div className={styles.resultPage}>
      <h2 className={styles.title}>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>

      <div className={styles.summaryCard}>
        <p className={styles.summaryItem}>
          <strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏¢:</strong>{" "}
          <span className={styles.predictionType}>
            {getBetTypeDisplayName(betType)}
          </span>
        </p>
        <p className={styles.summaryItem}>
          <strong>‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏¢:</strong>{" "}
          <span className={styles.predictionNumber}>{prediction}</span>
        </p>
        {/* ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß */}
      </div>

      {isCheckingResult ? (
        <div className={styles.loadingSection}>
          <div className={styles.spinner}></div>
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏´‡∏ß‡∏¢...</p>
        </div>
      ) : (
        <div className={styles.actualResultSection}>
          <p className={styles.resultLabel}>‡∏ú‡∏•‡∏´‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å:</p>
          <h3 className={styles.actualNumber}>{actualLottoResult}</h3>

          {isWinner ? (
            <div className={`${styles.resultBox} ${styles.winner}`}>
              <p className={styles.resultEmoji}>üéâ</p>
              <h3>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å!</h3>
              <p>‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ</p>
            </div>
          ) : (
            <div className={`${styles.resultBox} ${styles.loser}`}>
              <p className={styles.resultEmoji}>üòî</p>
              <h3>‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å</h3>
              <p>‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ó‡πâ‡∏≠‡πÅ‡∏ó‡πâ ‡∏•‡∏≠‡∏á‡∏ó‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏á‡∏ß‡∏î‡∏´‡∏ô‡πâ‡∏≤!</p>
            </div>
          )}
        </div>
      )}

      <Button
        onClick={() => navigate("/")}
        variant="primary"
        className={styles.backButton}
      >
        ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      </Button>
    </div>
  );
}

export default ResultPage;
